// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
}

model Client {
  id String @id @default(cuid())

  firstName String
  lastName  String

  phoneNumber String

  country String
  address String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders     Order[]
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}


model Order {
  id String @id @default(cuid())

  orderItems OrderItem[]

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantId String

  status OrderStatus @default(PENDING)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  acceptedAt DateTime?
  completedAt DateTime?

  @@index([updatedAt])
}


model OrderItem {
  id String @id @default(cuid())

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String

  quantity    Int
  description String
  unitPrice   Int // The price is represented in cents for more precision instead of using floats

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id String @id @default(cuid())

  name        String
  phoneNumber String

  address String
  country String

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AUTH SCHEMAS

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
